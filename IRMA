#!/usr/bin/env bash
set -Eeuo pipefail

err_report() {
  echo -e "\e[1m\e[31mError on line $(caller)\e[0m" >&2
}

trap "err_report" ERR

PROGRAM="Iterative Refinement Meta-Assembler (IRMA)"
AUTHOR="Samuel S. Shepard"
EMAIL="vfn4@cdc.gov"
AFFIL="NCIRD/OID/CDC"
DATE="13 APR 2017"
VERSION="0.6.7"
LICENSE="GPL version 3. This program comes with ABSOLUTELY NO WARRANTY. This is free software.
You are welcome to redistribute it under certain conditions. See:  <http://www.gnu.org/licenses/>.
Components of this pipeline have non-commercial restrictions. See: IRMA_RES/scripts/packaged-citations-licenses"

if [ $# -eq 4 ];then
	PAIRED=1
	MODULE_CONFIG=$1
	LEFT=$2			# R1 / left FASTQ
	RIGHT=$3		# R2 / right FASTQ
	RUN=$4			# name of the run
elif [ $# -eq 3 ];then
	PAIRED=0
	MODULE_CONFIG=$1
	LEFT=$2			# single paired end FASTQ
	RIGHT=""
	RUN=$3			# name of the run
else
	echo -e "$PROGRAM, v$VERSION ($DATE)"
	echo -e "$AUTHOR ($AFFIL), $EMAIL\n"
	echo -e "$LICENSE\n\nUSAGE:"
	echo -e "(PAIRED-END):\t$(basename $0) <MODULE|MODULE-CONFIG> <R1.fastq.gz|R1.fastq> <R2.fastq.gz|R2.fastq> <sample_name>"
	echo -e "(SINGLE-END):\t$(basename $0) <MODULE|MODULE-CONFIG> <fastq|fastq.gz> <sample_name>\n"
	exit 1
fi

#### UTILITY FUNCTIONS ####
function time_stamp() {
	local t=$(date +"%Y-%m-%d %k:%M:%S")
	echo -e "[$t]\t\e[35mIRMA/$MODULE_CONFIG\e[0m $1"
}
###########################

# variables
OS="Linux"
command -v uname >/dev/null 2>&1 && OS=$(uname -s)
if [ "$OS" != "Linux" -a "$OS" != "Darwin" ];then
	time_stamp "\e[31m\e[1mYour $OS OS not yet supported.\e[0m"
	exit 1
fi

R=1			# current round
LANG=POSIX		# collation
owd=$(pwd)
bpath=
if [ "$bpath" == "" ]; then
	bpath=$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
fi
rpath=$bpath/IRMA_RES	# IRMA resources
spath=$rpath/scripts	# IRMA specific scripts/binaries


# FNC - CHECK PROGRAM #
# Idea courtesy: stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script
function check_prgm() {
	command -v $1 >/dev/null 2>&1 || { echo "$PROGRAM ERROR: '$1' not found, add to the PATH or install." >&2; exit 1; }
}

# Check and find supporting code
if [ -d "$bpath/LABEL_RES/scripts/" ];then
	Lspath="$bpath/LABEL_RES/scripts/"
	check_prgm $bpath/LABEL
	LABEL=$bpath/LABEL
else
	check_prgm LABEL
	LABEL=$(which LABEL)
	Lspath="$(dirname $LABEL)/LABEL_RES/scripts"
fi

check_prgm Rscript
check_prgm perl


check_prgm parallel
SAMTOOLS=samtools
check_prgm $SAMTOOLS
BLAT=blat
check_prgm $BLAT
SSW=$spath/ssw_$OS
# SSW=ssw_test
check_prgm $SSW
A2M=$Lspath/align2model_$OS
check_prgm $A2M
RSCRIPT="$(which Rscript) --vanilla"
check_prgm gzip
check_prgm pigz
ZIP="pigz -p $(nproc)"

# select cat for reading reads
if [ "${#LEFT}" -gt "2" ];then
	if [ "${LEFT: -3}" == ".gz" ];then
		CAT="zcat"
	else
		CAT="cat"
	fi
else
	CAT="cat"
fi

# check for module
MODULE=$(echo ${MODULE_CONFIG}|cut -f1 -d'-')
if [ ! -d "$rpath/modules/$MODULE" ];then
	echo "IRMA ERROR: $MODULE not found."
	exit 1
else
	mpath=$rpath/modules/$MODULE
fi

# load reference dataset paths
Lmpath=$(dirname $LABEL)/LABEL_RES/training_data/irma-$MODULE
if [ -n "$(shopt -s nullglob;echo $mpath/profiles/*.mod)" ];then
	phmms=$mpath/profiles
elif [ -r "$Lmpath" ];then
	phmms=$Lmpath
else
	phmms="none"
fi

# load module parameter file
DEF_SET=$mpath/reference/consensus.fasta
if [ -r $rpath/defaults.sh ];then
	source $rpath/defaults.sh
else
	time_stamp "Missing defaults. ABORTING. Please restore from $rpath/.defaults.sh.bak" 
fi

# init variables from config files
[ -r $mpath/init.sh ] && source $mpath/init.sh

if [ -r "$mpath/config/${MODULE_CONFIG}.sh" ];then
	source $mpath/config/${MODULE_CONFIG}.sh
else
	CONFIG=$(echo ${MODULE_CONFIG}|cut -f2 -d'-')
	if [ -r "$mpath/config/${CONFIG}.sh" ];then
		source $mpath/config/${CONFIG}.sh
	elif [ "$MODULE" != "$CONFIG" ];then
		echo "IRMA ERROR: Configuration '$MODULE_CONFIG' not found. Valid configs are:"
		tmp=" "
		for i in $mpath/config/*sh;do tmp="$tmp $(basename $i .sh)";done
		echo $tmp
		exit 0
	fi
fi
REF1_SET=$REF_SET

# process seed reference library
if [ ! -s "$REF_SET" ];then
	echo "IRMA ERROR! The REF_SET data was not found for: $REF_SET"
	exit 0
elif [ ! -r "$REF_SET" ];then
	echo "IRMA ERROR! The REF_SET file was not readable: $REF_SET"
	exit 0
fi

if [ "$GRID_ON" -eq "1" ];then
	if ! command -v qsub >/dev/null 2>&1;then
		echo "IRMA WARNING: configured with GRID_ON=1 but no 'qsub' command found. Switching to GRID_ON=0 for local computation."
		GRID_ON=0
	fi
fi

# build arrays
declare -a MATCH_PROGS=($MATCH_PROG)
declare -a SORT_PROGS=($SORT_PROG)
declare -a ALIGN_PROGS=($ALIGN_PROG)
	
# check for skip align step
if [ "$MAX_ROUNDS" -eq "1" -a "$ASSEM_REF" -eq "1" ];then
	ALIGN_PROGS[0]="NONE"
fi

# define ppath
# echo -e "\e[34mGenerating Random Token!\e[0m"
# TOKEN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
TOKEN=$(uuidgen)
if [ "$ALLOW_TMP" -eq "1" -a "$GRID_ON" -eq "0" ];then
	ppath=$TMP/$(whoami)/IRMAv$VERSION/${RUN}-${TOKEN}
else
	ppath=$rpath/ppath/${RUN}-${TOKEN}
fi

# check if RUN already exists
if [ ! -d "$ppath" ]; then
	mkdir -p $ppath
	if [ "$?" -ne "0" ];then
		echo "$(basename $0) ERROR: cannot create directory '$ppath', operations ABORTED!"
		exit 1
	fi
else
	echo "$(basename $0) ERROR: run '$RUN' exists, operations have been ABORTED!"
	exit 1
fi

# stage paths
matchp=$ppath/MATCH
sortp=$ppath/SORT
alignp=$ppath/ALIGN
assemp=$ppath/ASSEMBLY
refp=$ppath/GENES
mkdir $matchp $sortp $alignp $assemp $refp

# global program options
SSW_OPTS="-x $SSW_X -m $SSW_M -o $SSW_O -e $SSW_E"
BLAT_OPTS="-oneOff=1 -minIdentity=80 -tileSize=10"

# FASTQ converter/QC options
FASTQ_CONV_OPTS="-Q -M -T $QUAL_THRESHOLD -L $MIN_LEN"
[ "$PAIRED" -eq "1" -a "$ADAPTER" != "" ] && FASTQ_CONV_OPTS+=" -c $ADAPTER"
export IRMA_QUEUE

#####################
### Main Functions ###

function moveProject() {
	local x=2
	local mvpath=$owd/$RUN
	
	if [ ! -d $mvpath ];then
		mv $ppath $mvpath
	else
		local outpath=${mvpath}-V$x
		while [ -d $outpath ];do
			((x++))
			outpath=${mvpath}-V$x
		done
		mv $ppath $outpath
	fi
}

function doLABEL() {
	local queryDB=$1	# FASTA
	local name=$2		# PROJECT
	local labelmodule=$3	# CLASSIFICATION MODULE
	local workdir=$4	# workdir
	local limit=$5		# grid work
	local Earg=0
	local n=$(grep '>' $queryDB -c)
	
	[ "$n" -gt "$limit" -a "$GRID_ON" -eq "1" ] && Earg=2
	if [ "$n" -gt "0" ]; then
		$LABEL -E $Earg -W $workdir $queryDB $name irma-$labelmodule > /dev/null 2>&1
		mv $workdir/${name}/${name}_final.tab $workdir/SORTED_${name}.tab
	fi
}

function doBLAT() {
	local refDB=$1
	local queryDB=$2
	local prefix=$3
	local name=$4
	local workdir=$5
	local procs=$6
	local limit=$7
	local doGrid=0
	local script=$workdir/${prefix}-${name}-BLAT.sh
	local n=$(grep '>' $queryDB -c)

	if [ "$n" -gt "$limit" -a "$GRID_ON" -eq "1" ];then
		doGrid=1
	elif [ "$n" -ge "$SINGLE_LOCAL_PROC" ];then
		procs=$SINGLE_LOCAL_PROC	
	else
		procs=1
	fi

	local options=""
	if [ "$SORT_PROG" == "BLAT" ];then
		if [ "$ALIGN_PROG" == "BLAT" ];then
			options="-C -A"
		else
			options="-C"
		fi
	elif [ "$SORT_PROG" == "LABEL" -a "$LFASTM" -eq "1" ];then 
		[ -z "$GENE_GROUP" ] && options="-T" || options="-G $GENE_GROUP"
	fi
	[ "$INCL_CHIM" -eq "1" ] && options+=" -I"
	[ "$SKIP_E" -eq "1" ] && options+=" -S"

###
cat >$script  <<EOF
#!/usr/bin/env bash

set -Eeuxo pipefail

LANG=$LANG
shopt -u nocaseglob;shopt -u nocasematch

if [ "\$#" -eq "1" ];then
	ID=\$(printf %04d \$1)
else
	ID=\$(printf %04d \$SGE_TASK_ID)
fi
INPUT=$workdir/${prefix}-${name}_\$ID.fasta
OUTPUT=$workdir/${prefix}-${name}_\$ID.blat

$BLAT $refDB \$INPUT \$OUTPUT $BLAT_OPTS
$spath/parseBlat.pl \$OUTPUT \$INPUT $options -P $prefix
EOF
###
	chmod 755 $script
	$Lspath/interleavedSamples.pl -G $procs $queryDB $workdir/$prefix-$name > /dev/null 2>&1
	if [ "$doGrid" -eq "1" ];then
		qsub $IRMA_QUEUE -t 1-$procs:1 -N ${prefix}-${name}-BLAT -sync y -wd $workdir -j y -o $script.o $script > /dev/null 2>&1
		if [ "$?" -ne "0" ];then
			time_stamp "qsub of '${prefix}-${name}-BLAT' failed. Switching to master node."
			parallel --workdir $workdir -j $SINGLE_LOCAL_PROC $script {} ::: $(seq $procs) > /dev/null 2>&1
		else
			rm $script.o
		fi
	else
		parallel --workdir $workdir -j $procs  $script {} ::: $(seq $procs) > /dev/null 2>&1
	fi
	rm $script
}

function doMATCH() {
	local DB=$1
	local prefix=$2
	local match_ext=""
	local name="all"
	local doGrid=0
	local procs=0
	local i=0

	if [ "$MATCH_PROG" == "BLAT" ];then
		doBLAT $REF_SET $DB $prefix $name $matchp $MATCH_PROC $LIMIT_BLAT
		match_ext="blat"
	else
		time_stamp "$prefix aborted, MATCH:$MATCH_PROG not implemented"
		if [ $R -gt 1 ];then
			doPostProcessing
		fi
		moveProject
		time_stamp 'finished!'
		exit
	fi

	time_stamp "$prefix all-match with $MATCH_PROG finished"
	# consolidate
	cat $matchp/${prefix}-${name}_????.match > $matchp/${prefix}.match &
	cat $matchp/${prefix}-${name}_????.nomatch > $matchp/${prefix}.nomatch &
	cat $matchp/${prefix}-${name}_????.chim > $matchp/${prefix}.chim &
	wait

	# LABEL fast mode consoldiation
	if [ "$LFASTM" -eq "1" -a "$SORT_PROG" == "LABEL" -a ! -z "$GENE_GROUP" ];then
		for i in $(echo $GENE_GROUP|tr ',:' ' ');do
			if test -n "$(shopt -s nullglob;echo $matchp/${prefix}-${name}_????.match.$i)";then
				cat $matchp/${prefix}-${name}_????.match.$i > $matchp/${prefix}.match.$i && rm $matchp/${prefix}-${name}_????.match.$i &
			fi
		done
		wait
	fi

	# CLEAN UP	
	rm $matchp/${prefix}-${name}_????.{match,nomatch,chim,fasta}
	cd $matchp
	tar  -cf ${prefix}-${name}_????.$match_ext|$ZIP -4 - > $matchp/${prefix}.tar.gz 2> /dev/null
	cd - > /dev/null
	rm $matchp/${prefix}-${name}_????.$match_ext
	time_stamp "$prefix consolidated & cleaned"

	# EXTEND to SORT
	if [ "$SORT_PROG" == "$MATCH_PROG" ];then
		mkdir $sortp/${prefix}
		cat $matchp/${prefix}-${name}_????.class > $sortp/$prefix/SORT_result.txt
		rm $matchp/${prefix}-${name}_????.class
	fi

	# EXTEND to ALIGN
	if [ "$ALIGN_PROG" == "$MATCH_PROG" ];then
		if test -n "$(shopt -s nullglob;echo $matchp/*.sto)";then
			mv $matchp/*.sto $alignp
		fi
	fi
}

function doSORT() {
	local DB=$1
	local prefix=$2

	if [ "$SORT_PROG" == "LABEL" ];then
		mkdir $sortp/${prefix}
		if [ "$LFASTM" -eq "1" ];then
			groupFile=""
			if test -n "$(shopt -s nullglob;echo $matchp/${prefix}.match.*)";then
				for groupFile in $matchp/${prefix}.match.*;do
					local geneGroup=$(basename $groupFile|cut -f3 -d'.')
					doLABEL $groupFile "$MODULE-$geneGroup" "$MODULE-$geneGroup" $sortp/${prefix} $LIMIT_LABEL &
				done
				wait
			fi
		else
			# SORT using LABEL full
			doLABEL $matchp/${prefix}.match $MODULE $MODULE $sortp/${prefix} $LIMIT_LABEL
		fi
		cat $sortp/${prefix}/SORTED_*.tab > $sortp/${prefix}/SORT_result.txt 2> /dev/null
	elif [ "$SORT_PROG" == "BLAT" ];then
		# TO-DO: assumes BLAT was run on MATCH	
		:
	else
		time_stamp "$prefix aborted, SORT:$SORT_PROG not implemented"
		if [ $R -gt 1 ];then
			doPostProcessing
		fi
		moveProject
		time_stamp 'finished!'
		exit
	fi
	time_stamp "$prefix sorted using $SORT_PROG"

	if [ ! -r $sortp/$prefix/SORT_result.txt ];then
		time_stamp "$prefix aborted, sort failed"
		if [ $R -gt 1 ];then
			doPostProcessing
		fi
		moveProject
		time_stamp 'finished!'
		exit
	fi

	set +o pipefail
	x=$(grep UNRECOGNIZABLE $sortp/$prefix/SORT_result.txt -c) || true
	set -o pipefail
	y=$(wc -l < $sortp/$prefix/SORT_result.txt)
	if [ $x -gt 0 -a $x -eq $y ];then
		time_stamp "$prefix found no significant reads"
		if [ $R -gt 1 ];then
			doPostProcessing
		fi
		moveProject
		time_stamp 'finished!'
		exit
	fi

	local options="-C $MIN_RC -D $MIN_RP"
	[ "$SORT_PROG" == "BLAT" ] && options+=" -G"
	[ "$SORT_GROUPS" != "" ] && options+=" -P $SORT_GROUPS"
	[ "$BAN_GROUPS" != "" ] && options+=" -B $BAN_GROUPS"
	$spath/parseSORTresults.pl $sortp/$prefix/SORT_result.txt $matchp/$prefix.match $sortp/$prefix $options

	# CLEAN UP
	cd $sortp/$prefix; tar  -cf - SORT_result.txt |$ZIP -4 - > $sortp/$prefix.tar.gz
	cd - > /dev/null; rm -rf $sortp/$prefix
}

function doSAM() {
	local queryDB=$1
	local prefix=$2
	local name=$3
	local workdir=$4
	local procs=$5
	local limit=$6
	local doGrid=0
	local mod=$phmms/${name}_hmm.mod
	local script=$workdir/$prefix-$name-SAM.sh
	local n=$(grep '>' $queryDB -c)

	if [ "$n" -gt "$limit" -a "$GRID_ON" -eq "1" ];then
		doGrid=1
	elif [ "$n" -ge "$SINGLE_LOCAL_PROC" ];then
		procs=$SINGLE_LOCAL_PROC	
	else
		procs=1
	fi

	local options=""
	[ "$SKIP_E" -eq "1" ] && options+="-S"
			
cat > $script  <<EOF
#!/usr/bin/env bash

set -Eeuo pipefail

LANG=$LANG
shopt -u nocaseglob;shopt -u nocasematch

if [ "\$#" -eq "1" ];then
	ID=\$(printf %04d \$1)
else
	ID=\$(printf %04d \$SGE_TASK_ID)
fi
DB=$workdir/${prefix}-${name}_\$ID.fasta
RUN=$workdir/${prefix}-${name}_\$ID
MOD=$mod

$A2M \$RUN -modelfile \$MOD -db \$DB
$spath/a2mToMatchStats.pl \$RUN.a2m \$RUN.sto $options
EOF

	chmod 755 $script
	$Lspath/interleavedSamples.pl $queryDB $workdir/$prefix-$name -G $procs > /dev/null
	if [ "$doGrid" -eq "1" ];then
		qsub $IRMA_QUEUE -t 1-$procs:1 -N $prefix-$name-SAM -sync y -wd $workdir -j y -o $script.o $script > /dev/null 2>&1
		if [ "$?" -ne "0" ];then
			time_stamp "qsub of '${prefix}-${name}-SAM' failed. Switching to master node."
			parallel --workdir $workdir -j $SINGLE_LOCAL_PROC $script {} ::: $(seq $procs) > /dev/null 2>&1
		else
			rm $script.o
		fi
	else
		parallel -j $procs --workdir $workdir  $script {} ::: $(seq $procs) > /dev/null 2>&1
	fi
	rm $workdir/${prefix}-${name}_????.{fasta,a2m} $script
}

function doALIGN() {
	local prefix=$1
	local queryDB=""
	local i=0
	local j=0
	local name=""
	local gene=""

	# FOR EACH GENE
	for queryDB in $sortp/$prefix-*.fa;do
		name=$(basename $queryDB .fa);name=${name#*-}

		if [ "$ALIGN_PROG" == "SAM" ];then
			doSAM $queryDB $prefix $name $alignp $ALIGN_PROC $LIMIT_SAM &
		elif [ "$ALIGN_PROG" == "BLAT" ];then
			j=$(($R - 1))
			if [ "$R" -gt 1 ];then
				for i in $(seq $j);do
					rm $alignp/R${i}-$name*.sto
					doBLAT $refp/R${j}-$name.ref $sortp/R${i}-${name}.fa R$i $name $alignp $ALIGN_PROC $LIMIT_BLAT &
				done
			fi
		elif [ "$ALIGN_PROG" == "NONE" ];then
			:	
		else
			time_stamp "$prefix aborted, ALIGN:$ALIGN_PROG not implemented"
			if [ $R -gt 1 ];then
				doPostProcessing
			fi
			moveProject
			time_stamp 'finished!'
			exit
		fi
	done
	wait
	time_stamp "$prefix rough aligned reads using $ALIGN_PROG"

	# CREATE NEW REFERENCES
	local options="-C $MIN_CA -F $MIN_FA"
	[ "$ALIGN_PROG" == "BLAT" ] && options+=" -A"
	[ "$SKIP_E" -eq "1" ] && options+=" -S" 
	# [ "$DENOM" != "" ] && options+=" -O $DENOM"
	if [ "$ALIGN_PROG" != "NONE" ];then
		for i in $sortp/$prefix-*.fa;do
			name=$(basename $i .fa)
			gene=${name#*-}
			$spath/combineALIGNstats.pl -N $gene $options $alignp/R*-${gene}_????.sto > $refp/$name.ref &

			# consider placing burden on the function itself to do the cleanup
			[ "$ALIGN_PROG" == "BLAT" -a "$R" -gt 1 ] && rm $alignp/R*-${gene}_????.{match,nomatch,chim,fasta,class,blat} &
		done
		wait
	fi
}

function doRound() {
	local DB=$1
	local prefix=$2
	local n=$(grep '>' $DB -c)
	local x=0
	local y=0
	local gene=""
	local name=""

	time_stamp "$prefix started ($n)"

	# MATCH stage
	doMATCH $DB $prefix
	n=$(grep '>' $matchp/${prefix}.match -c)
	if [ "$n" -eq "0" ];then
		time_stamp "$prefix aborted, no matches found"
		if [ $R -gt 1 ];then
			doPostProcessing
		fi
		moveProject
		time_stamp 'finished!'
		exit
	fi
	
	### SORT stage ###
	DB=$matchp/${prefix}.match
	doSORT $DB $prefix

	# PRIMARY vs SECONDARY tests
	# if we have primary data from the current round
	if test -n "$(shopt -s nullglob;echo $sortp/$prefix-*.fa)";then
		# for each current primary dataset
		for i in $sortp/$prefix-*.fa;do
			name=$(basename $i .fa)
			gene=${name#*-}
			# if previously a secondary lineage, make the current primary a secondary
			test -n "$(shopt -s nullglob;echo $sortp/R*-${gene}.fa.2)" && mv $i ${i}.2
		done
	fi

	# vice-versa, if we have secondary data from this round
	if test -n "$(shopt -s nullglob;echo $sortp/$prefix-*.fa.2)";then
		# for each current secondary dataset
		for i in $sortp/$prefix-*.fa.2;do
			name=$(basename $i .fa.2)
			gene=${name#*-}
			# if previously a primary lineage, make the current secondary a primary
			# used to be ".ref"
			test -n "$(shopt -s nullglob;echo $sortp/R*-${gene}.fa)" && mv $i $sortp/$(basename $i .2)
		done
	fi

	# add R0 for tracing history better
	if [ "$ASSEM_REF" -eq "0" -a "$R" -eq "1" ];then
		for i in $sortp/$prefix-*.fa;do
			if test -n "$(shopt -s nullglob;echo $sortp/$prefix-*.fa)";then
				name=$(basename $i .fa)
				gene=${name#*-}
				$Lspath/selectSequences.pl -I $gene $REF1_SET > $refp/R0-${gene}.ref
			fi
		done
	fi

	### ALIGN stage ###
	# given we have primary data in this round	
	if test -n "$(shopt -s nullglob;echo $sortp/$prefix-*.fa)";then
		doALIGN $prefix
	else
		time_stamp "$prefix aborted, found fewer than $MIN_RP RPs or $MIN_RC reads for all template"
		if [ $R -eq 1 ];then
			mkdir $ppath/low_abundance
			mkdir $ppath/other_data
			for i in $sortp/*2;do
				mv $i $ppath/low_abundance/$(basename $i .2)
			done

			if test -n "$(shopt -s nullglob;echo $ppath/low_abundance/*UNRECOGNIZABLE*)";then
				cat $ppath/low_abundance/*UNRECOGNIZABLE* > $ppath/other_data/failed_sort.fa
				rm $ppath/low_abundance/*UNRECOGNIZABLE*
			fi

			mv $matchp/R1.nomatch $ppath/other_data/unmatched_data.fa
			mv $matchp/R1.chim $ppath/other_data/chimeric.fa
			mv $matchp/R1.tar.gz $ppath/other_data/match_output.tar.gz
			mv $sortp/R1.tar.gz $ppath/other_data/sort_output.tar.gz
			echo -e "Gene\tRead Patterns\tRead Count" > $ppath/sorted_read_stats.txt
			cat $sortp/R1.txt >> $ppath/sorted_read_stats.txt && rm $sortp/R1.txt
			echo -e "Interleaved sample\tStarting reads\tQC'd reads\tQuality threshold\tMin length\tUse median" > $ppath/read_QC_filtering.txt
			cat $ppath/QC_log.txt >> $ppath/read_QC_filtering.txt && rm $ppath/QC_log.txt
			
			if test -n "$(shopt -s nullglob;echo $ppath/R1.match.*)";then
				rm $ppath/R1.match.*
			fi
			rm $ppath/R*.{fa,xfl}
			rm -rf $alignp $matchp $refp $sortp $assemp
		else
			doPostProcessing
		fi
	
		moveProject
		time_stamp 'finished!'
		exit
	fi

	if [ "$ALIGN_PROG" != "NONE" ];then
		cat $refp/${prefix}*.ref > $refp/${prefix}.refs
		REF_SET=$refp/${prefix}.refs
		QUERY_SET=$matchp/$prefix.nomatch
		time_stamp "$prefix references created"
	fi

	# if we have MERGE_SECONDARY set and it is after the first round, load the alt match data back in for the next round
	if [ "${MERGE_SECONDARY:-0}" -eq "1" -a "$R" -eq "1" ];then
		test -n "$(shopt -s nullglob;echo $sortp/R1-*.fa.2)" && cat $sortp/R1-*.fa.2 >> $QUERY_SET && rm $sortp/R1-*.fa.2
	fi
}

#############################################
############# ASSEMBLY SECTION ##############
#############################################

#-------------------------------------------#
#--- Polishing assembly function -----------#
#-------------------------------------------#
function ASSEM_RUN_SSW() {
	local iter=$1
	local gene=$2
	local ref=$3
	local procs=$4
	local doGrid=$5
	local script=$assemp/F${iter}-${gene}.sh

	local options=""
	[ "$ASSEM_REF" -eq "1" ] && options+=" -G"

###
cat > $script <<EOF
#!/usr/bin/env bash

set -Eeuo pipefail

LANG=$LANG
shopt -u nocaseglob;shopt -u nocasematch

if [ "\$#" -eq "1" ];then
	ID=\$(printf %04d \$1)
else
	ID=\$(printf %04d \$SGE_TASK_ID)
fi
FASTQ=$assemp/${gene}_\$ID.fastq
SAM=$assemp/F${iter}-${gene}-\$ID.sam
STAT=$assemp/F${iter}-${gene}-\$ID.sto

$SSW -s -c -h -r $SSW_OPTS $ref \$FASTQ > \$SAM 2> /dev/null
$spath/winnowSAM.pl -I \$SAM
$spath/samStats.pl $options $ref \$SAM \$STAT
EOF
###

	# ASSEMBLE on grid vs local
	chmod 755 $script
	if [ "$doGrid" -eq "1" ];then
		qsub $IRMA_QUEUE -t 1-$procs:1 -N F${iter}-$gene -sync y -wd $assemp -j y -o $script.o $script > /dev/null 2>&1
		if [ "$?" -ne "0" ];then
			time_stamp "qsub of 'F${iter}-$gene' failed. Switching to master node."
			parallel --workdir $ppath -j $SINGLE_LOCAL_PROC $script {} ::: $(seq $procs)
		else
			rm $script.o
		fi
	else
		parallel --workdir $ppath -j $procs $script {} ::: $(seq $procs)
	fi
	$spath/catSAMfiles.pl $assemp/F${iter}-${gene}-*.sam > $assemp/F${iter}-$gene.sam
	rm $script
}


#-------------------------------------------#
#--- Scoring assembly function   -----------#
#-------------------------------------------#
function ASSEM_SCORE_SSW() {
	local SAM=$1
	$spath/scoreSAM.pl $SAM
}
#############################################
#############################################
#############################################


function doCALLS() {
	local iter=$1
	local gene=$2
	local final=$3
	local procs=$4
	local doGrid=$5
	local ref=$assemp/F${iter}-${gene}.ref

	# PAIRED VS SINGLE END
	if [ "$PAIRED" -eq "1" ];then
		local prefix=M${iter}-${gene}
		local prefix2=$assemp/M${iter}-${gene}
		local pstats="-E $final-pairingStats.txt"
	else
		local prefix=S${iter}-${gene}
		local prefix2=$assemp/F${iter}-${gene}
		local pstats=""
	fi
	local script="$assemp/${prefix}"

#########################################
# DO CALL STATS and MERGE if PAIRED END #
#########################################
cat > ${script}.sh <<EOF
#!/usr/bin/env bash

set -Eeuo pipefail

LANG=$LANG
shopt -u nocaseglob;shopt -u nocasematch

if [ "\$#" -eq "1" ];then
	ID=\$(printf %04d \$1)
else
	ID=\$(printf %04d \$SGE_TASK_ID)
fi
SAM=$assemp/F${iter}-${gene}-\$ID.sam
VPREFIX=$assemp/V${iter}-${gene}-\$ID

if [ "$PAIRED" -eq "1" ];then
	MSAM=$assemp/M${iter}-${gene}-\$ID.sam
	MPREFIX=$assemp/M${iter}-${gene}-\$ID
	$spath/mergeSAMpairs.pl -S $ref \$SAM \$MPREFIX
	$spath/varCallStats.pl $ref \$MSAM \$VPREFIX
else
	$spath/varCallStats.pl $ref \$SAM \$VPREFIX
fi

EOF
#########################################

	# GRID vs LOCAL execution of the CALL STATS step, inherits from ASSEMBLY step currently
	chmod 755 ${script}.sh
	if [ "$doGrid" -eq "1" ];then
		qsub $IRMA_QUEUE -t 1-$procs:1 -N $prefix -sync y -wd $assemp -j y -o ${script}.o ${script}.sh > /dev/null 2>&1
		if [ "$?" -ne "0" ];then
			time_stamp "qsub of '${prefix}' failed. Switching to master node."
			parallel --workdir $ppath -j $SINGLE_LOCAL_PROC ${script}.sh {} ::: $(seq $procs)
		else
			rm ${script}.o
		fi
	else
		parallel --workdir $ppath -j $procs ${script}.sh {} ::: $(seq $procs)
	fi
	rm ${script}.sh

	# GROUP
	$spath/catSAMfiles.pl ${prefix2}-*.sam > ${final}.sam

	# DO the CALL step
	local options="-C $MIN_C -F $MIN_F -I $MIN_FI -D $MIN_FD -Q $MIN_AQ -T $MIN_TCC -M $MIN_CONF -S $SIG_LEVEL"
	[ "$AUTO_F" -eq 1 ] && options+=" -A"
	[ "$PAIRED" -eq "1" ] && $spath/getPairingStats.pl ${prefix2}-*.sto > $final-pairingStats.txt
	$spath/call.pl -P -G $options $pstats $ref $final $assemp/V${iter}-${gene}-*.sto
}


function doPHASING() {
	local gene=$1
	local final=$2
	local proc=1
	local doGrid=0
	local script=${final}-phasing
	local n=$(wc -l < ${final}-variants.txt)
	((n--))
 	local ops=$(( (($n*$n)-$n)/2 ))
	if [ "$n" -lt "2" ];then
		return 0;
	elif [ "$n" -gt "$LIMIT_PHASE" -a "$GRID_ON" -eq "1" ];then
		procs=$PHASE_PROC
		doGrid=1
	else
		doGrid=0
		if [ $ops -gt $SINGLE_LOCAL_PROC ];then
			procs=$SINGLE_LOCAL_PROC
		else
			procs=1
		fi
	fi

#########################################
# DO PHASING			        #
#########################################
cat > ${script}.sh <<EOF
#!/usr/bin/env bash

set -Eeuo pipefail

LANG=$LANG
shopt -u nocaseglob;shopt -u nocasematch

if [ "\$#" -eq "1" ];then
	ID=\$1
else
	ID=\$SGE_TASK_ID
fi
PATS=$final-pats.sto
VARS=$final-vars.sto

$spath/phase.pl $final \$VARS \$PATS -A $procs -I \$ID
EOF
#########################################

	chmod 755 ${script}.sh
	if [ "$doGrid" -eq "1" ];then
		qsub $IRMA_QUEUE -t 1-$procs:1 -N ${gene}-phasing -sync y -wd $ppath -j y -o ${script}.o ${script}.sh > /dev/null 2>&1
		if [ "$?" -ne "0" ];then
			time_stamp "qsub of '${gene}-phasing' failed. Switching to master node."
			parallel --workdir $ppath -j $SINGLE_LOCAL_PROC ${script}.sh {} ::: $(seq $procs) > /dev/null 2>&1
		else
			rm ${script}.o
		fi
	else 
		parallel --workdir $ppath -j $procs ${script}.sh {} ::: $(seq $procs) > /dev/null 2>&1
	fi
	rm ${final}-pats.sto ${final}-vars.sto ${script}.sh

	local i=""
	for i in EXPENRD JACCARD MUTUALD NJOINTP;do
		cat ${final}-*-${i}.sqm > $final-${i}.sqm
		$spath/completeMatrix.pl $final-${i}.sqm
		rm ${final}-*-${i}.sqm
	done
	parallel --workdir $ppath $RSCRIPT $spath/sqmHeatmap.R ${final}-{}.sqm ${final}-{}.pdf 2 ::: EXPENRD JACCARD MUTUALD NJOINTP > /dev/null
}

function REFINE_ASSEMBLY_CALL_VARIANTS() {
	local gene=$1
	local procs=$2
	local doGrid=$3
	local final=$4

	if [ "$ASSEM_PROG" == "SSW" ];then
		local ASSEM_FUNCTION="ASSEM_RUN_SSW"
		local ASSEM_SCORE="ASSEM_SCORE_SSW"
	else
		time_stamp "at $gene aborted, ASSEMBLE:$ASSEM_PROG not implemented"
		if [ $R -gt 1 ];then
			doPostProcessing
		fi
		moveProject
		time_stamp 'finished!'
		exit
	fi

	# DEFINE local variables
	local log=$assemp/$gene.log
	local COMBINE_SAM_OPTS="-N $gene -I $INS_T -D $DEL_T -A $MIN_FA -C $MIN_CA"
	local theRef="";local theStats="";local newRef=""
	local theBAM="";local theSAM=""
	local lastScore=0;local currentScore=0;local iter=1

	for (( iter=1; iter <= $MAX_ITER_ASSEM; iter++ ));do
		# perform current assembly
		theRef=$assemp/F${iter}-$gene.ref
		$ASSEM_FUNCTION $iter $gene $theRef $procs $doGrid

		# convert SAM to BAM
		theSAM=$assemp/F${iter}-$gene.sam
		theBAM=$assemp/F${iter}-$gene.bam
		samtools view -bS $theSAM > $theBAM

		# save last score & take current score
		lastScore=$currentScore
		currentScore=$($ASSEM_SCORE $theSAM)
		echo -e "$currentScore\t$theSAM" >> $log

		theStats=$assemp/F${iter}-$gene-*.sto
		if [ "$lastScore" -lt "$currentScore" ];then
			if [ "$iter" -lt "$MAX_ITER_ASSEM" ];then
				# generate next reference
				newRef="$assemp/F$(( $iter + 1 ))-$gene.ref"
				$spath/combineSAMstats.pl $theRef $COMBINE_SAM_OPTS $theStats > $newRef
			fi
			rm $theStats
		else
			# we are finished
			rm $theStats
			break
		fi
	done

	# CALL variants
	if [ "$iter" -gt "$MAX_ITER_ASSEM" ]; then
		((iter--))
		doCALLS $MAX_ITER_ASSEM $gene $final $procs $doGrid
	else
		if [ "$lastScore" -gt "$currentScore" ]; then
			rm $theRef $theSAM $theBAM
			((iter--))
		fi
		doCALLS $iter $gene $final $procs $doGrid
	fi

	# CLEAN UP
	rm $assemp/${gene}_????.fastq
	rm $assemp/*-${gene}-????.*
	last_iter=$iter
}

function ASSEMBLE_REPORT() {
	local gene=$1
	local final=$ppath/$gene
	local fastq=$assemp/$gene.fastq
	local size=$(( $(wc -l < $fastq) / 4 ))
	local doGrid=0
	local procs=0
	local last_iter=1

	# SCOPE
	if [ "$size" -gt "$LIMIT_SSW" -a "$GRID_ON" -eq "1" ];then
		procs=$ASSEM_PROC
		doGrid=1
	else
		doGrid=0
		if [ $size -gt $SINGLE_LOCAL_PROC ];then
			procs=$SINGLE_LOCAL_PROC
		else
			procs=1
		fi
	fi

	# ITERATIVE REFINEMENT of ASSEMBLY chained to CALLING and PHASING
	if [ "$PAIRED" -eq "1" ];then
		$Lspath/interleavedSamples.pl -G $procs -P $fastq $assemp/$gene > /dev/null
	else
		$Lspath/interleavedSamples.pl -G $procs -Q $fastq $assemp/$gene > /dev/null
	fi
	time_stamp "started $gene ($size)"
	
	REFINE_ASSEMBLY_CALL_VARIANTS $gene $procs $doGrid $final
	doPHASING $gene $final

	local n=$(wc -l < ${final}-variants.txt)
	if [ "$n" -gt "2" ]; then
		parallel $RSCRIPT $spath/sqmHeatmap.R ${final}-{}.sqm ${final}-{}.pdf 2 ::: EXPENRD JACCARD MUTUALD NJOINTP > /dev/null
	fi

	if [ "$n" -gt "1" ]; then
		$RSCRIPT $spath/coverageDiagram.R $RUN $gene $final-coverage.txt $final-variants.txt $final-pairingStats.txt $final-coverageDiagram.pdf > /dev/null 2>&1
	else
		$RSCRIPT $spath/simpleCoverageDiagram.R $RUN $gene $final-coverage.txt $final-coverageDiagram.pdf > /dev/null 2>&1
	fi

	$RSCRIPT $spath/heuristicDiagram.R $MIN_AQ $MIN_F $MIN_TCC $MIN_CONF ${final}-allAlleles.txt ${final}-heuristics.pdf > /dev/null 2>&1

	local options="-C $MIN_C -N $RUN -F $MIN_AMBIG -P $ppath"
	[ "$SEG_NUMBERS" != "" ] && options+=" -S $SEG_NUMBERS"
	$spath/amendConsensus.pl ${final}.fasta ${final}-variants.txt $options

	if [ -r ${final}-insertions.txt -a -r ${final}-deletions.txt ];then
		local options="-C $MIN_C -F $MIN_F -I $MIN_FI -D $MIN_FD -Q $MIN_AQ -T $MIN_TCC -M $MIN_CONF -S $SIG_LEVEL"
		[ "$AUTO_F" -eq 1 ] && options+=" -A"
		$spath/vcfGenerator.pl $options ${final}.fasta ${final}-allAlleles.txt ${final}-insertions.txt ${final}-deletions.txt > ${final}.vcf
	fi

	samtools view -@ $procs -bS ${final}.sam | samtools sort -@ $procs > ${final}.bam
	samtools index ${final}.bam
	rm $assemp/F*-$gene.sam
	time_stamp "finished $gene (F$last_iter)"
}

function doPostProcessing() {
	# INFLATE TO FASTQ
	if [ "$ASSEM_REF" -eq "1" ];then
		if test -n "$(shopt -s nullglob;echo $refp/R0-*.ref)";then
			for ref in $refp/R0-*.ref;do
				name=$(basename $ref .ref)
				gene=${name#*-}
				if test -n "$(shopt -s nullglob;echo $sortp/R*-$gene.fa)";then
					cat $sortp/R*-$gene.fa > $assemp/$gene.fa
					$spath/xflate.pl -I -Q -R $ppath/R0.xfl $assemp/$gene.fa > $assemp/$gene.fastq &
					$spath/ordinalHeaders.pl -O $gene $ref > $assemp/F1-$gene.ref	
				fi
			done
		fi
	else
		# -G gets rid of alternative references
		for name in $($spath/finalRefs.pl -G $refp/*.refs);do
			gene=${name#*-}
			cat $sortp/R*-$gene.fa > $assemp/$gene.fa
			$spath/xflate.pl -I -Q -R $ppath/R0.xfl $assemp/$gene.fa > $assemp/$gene.fastq &
			head -n2 $refp/$name.ref > $assemp/F1-$gene.ref
		done
	fi
	wait
	time_stamp 'converted back to fastq'

	# SAVE unmatched read patterns
	cd $matchp
	local LAST_ROUND=$(($R<=MAX_ROUNDS?$R:$MAX_ROUNDS))
	tar -cf - R${LAST_ROUND}.nomatch|$ZIP -4 - > $ppath/unmatched_read_patterns.tar.gz &
	cd - > /dev/null
	if [ "$ALIGN_PROG" != "NONE" ];then
		cd $alignp
		tar -cf - R*.sto 2>/dev/null |$ZIP -4 - > storedCounts.tar.gz &
		cd - > /dev/null
	fi
	wait
	time_stamp 'saved unmatched read patterns'

	# CLEAN UP
	if [ "$LFASTM" -eq "1" -a "$SORT_PROG" == "LABEL" ];then 
		if test -n "$(shopt -s nullglob;echo $matchp/R?.match.*)";then
			rm $matchp/R?.match.*
		fi
	fi

	### experimental ###
	echo -e "Record\tReads\tPatterns\tPairsAndWidows" >> $ppath/READ_COUNTS.txt
	if [ "$PAIRED" -eq "1" ];then
		raw1=$(grep LEFT.log $ppath/QC_log.txt |$spath/sumField.pl -F 2)
		raw2=$(grep RIGHT.log $ppath/QC_log.txt |$spath/sumField.pl -F 2)
		echo -e "0-R1\t${raw1}\tNA\tNA" >> $ppath/READ_COUNTS.txt
		echo -e "0-R2\t${raw2}\tNA\tNA" >> $ppath/READ_COUNTS.txt
	fi
	raw1=$(cat $ppath/QC_log.txt|$spath/sumField.pl -F 2)
	raw2=$(cat $ppath/QC_log.txt|$spath/sumField.pl -F 3)
	raw3=$(( $raw1 - $raw2 ))
	read raw pats <<<$(grep '>' $ppath/R0.fa|cut -f2 -d'%'|$spath/sumField.pl -S)
	echo -e "1-initial\t${raw1}\tNA\tNA" >> $ppath/READ_COUNTS.txt
	echo -e "2-failQC\t${raw3}\tNA\tNA" >> $ppath/READ_COUNTS.txt
	echo -e "2-passQC\t${raw}\t${pats}\tNA" >> $ppath/READ_COUNTS.txt
	set +o pipefail
	read raw1 pats1 <<<$(grep '>' $matchp/*.chim|cut -f2 -d'%'|$spath/sumField.pl -S)
	read raw2 pats2 <<<$(grep '>' $matchp/R${LAST_ROUND}.nomatch|cut -f2 -d'%'|$spath/sumField.pl -S)
	set -o pipefail
	echo -e "3-chimeric\t${raw1}\t${pats1}\tNA" >> $ppath/READ_COUNTS.txt
	echo -e "3-nomatch\t${raw2}\t${pats2}\tNA" >> $ppath/READ_COUNTS.txt

	if test -n "$(shopt -s nullglob;echo $sortp/*UNRECOGNIZABLE*)";then
		read raw pats <<<$(grep '>' $sortp/*UNRECOGNIZABLE*|cut -f2 -d'%'|$spath/sumField.pl -S)
		echo -e "3-unrecognizable\t${raw}\t${pats}\tNA" >> $ppath/READ_COUNTS.txt
	fi


	### end experimental ###
	grep '>' $matchp/R?.{match,nomatch,chim} $ppath/R0.fa -c > $ppath/NR_COUNTS_log.txt
	rm $ppath/R0.{fa,xfl} &
	[ "$ALIGN_PROG" != "NONE" ] && rm $alignp/R*.sto &
	rm $refp/R*.refs &
	rm $matchp/R*.{match,nomatch,chim} &
	rm $sortp/R*.fa &
	wait
	
	# POLISH the final assembly & do variant calls/phasing
	for ref1 in $assemp/F1-*.ref;do
		name=$(basename $ref1 .ref)
		gene=${name#*-}
		ASSEMBLE_REPORT $gene &
	done
	wait
	time_stamp 'mapped to references, BAM files created'

	for i in $ppath/*bam; do
		pairs=$($SAMTOOLS view -c $i)
		gene=$(basename $i .bam)
		read raw pats <<<$(grep '>' $assemp/${gene}.fa|cut -f2 -d'%'|$spath/sumField.pl -S)
		echo -e "4-${gene}\t${raw}\t${pats}\t${pairs}" >> $ppath/READ_COUNTS.txt.tmp
		echo ${i}:$pairs >> $ppath/READ_log.txt
	done

	cd $assemp
	tar -cf - *.fastq|$ZIP -4 - > $assemp/reads.tar.gz
	cd - > /dev/null
	grep '>' $assemp/*.fa -Hc >> $ppath/NR_COUNTS_log.txt
	rm $assemp/*.fastq $assemp/*.fa

	[ ! -d $ppath/amended_consensus ] && mkdir $ppath/amended_consensus
	[ -n "$(shopt -s nullglob;echo $ppath/*.fa)" ] && mv $ppath/*.fa $ppath/amended_consensus
	
	[ ! -d $ppath/matrices ] && mkdir $ppath/matrices	
	[ -n "$(shopt -s nullglob;echo $ppath/*.sqm)" ] && mv $ppath/*.sqm $ppath/matrices
	
	echo -e "Total Score\tAlignment" > $ppath/ASSEMBLY_log.txt
	cat $assemp/*.log >> $ppath/ASSEMBLY_log.txt
	rm $assemp/*.log $ppath/*.sam

	# handle logs
	mkdir $ppath/logs
	mv $ppath/*log.txt $ppath/logs
	[ -r $rpath/.commit ] && LAST_COMMIT="$(cat $rpath/.commit)" || LAST_COMMIT="NOT_AVAILBLE"
	source $spath/run_info.sh
	source $spath/run_config.sh

	# final order
	mkdir $ppath/secondary
	mv $ppath/unmatched_read_patterns* $ppath/secondary

	# deposit secondary data
	if test -n "$(shopt -s nullglob;echo $sortp/*.fa.2)";then
		for i in $sortp/*.fa.2;do
			mv $i $ppath/secondary/$(basename $i .2)
		done
	
		# alternative counts
		for gene in $(parallel echo  {/.} ::: $ppath/secondary/*.fa|cut -f2- -d'-'|sort|uniq|grep -v UNRECOGNIZABLE);do
			read raw pats <<<$(grep -h '>' $ppath/secondary/*-${gene}.fa|cut -f2 -d'%'|$spath/sumField.pl -S)
			echo -e "5-$gene\t${raw}\t${pats}\tNA" >> $ppath/READ_COUNTS.txt.tmp
		done 
	fi

	if [ "$(grep '^4-' $ppath/READ_COUNTS.txt.tmp -c)" -gt "0" ];then
		x=$(grep '^4-' $ppath/READ_COUNTS.txt.tmp|$spath/sumField.pl -F 2)
		y=$(grep '^4-' $ppath/READ_COUNTS.txt.tmp|$spath/sumField.pl -F 3)
		z=$(grep '^4-' $ppath/READ_COUNTS.txt.tmp|$spath/sumField.pl -F 4)
		echo -e "3-match\t$x\t$y\t$z" >> $ppath/READ_COUNTS.txt
	fi

	if [ "$(grep '^5-' $ppath/READ_COUNTS.txt.tmp -c)" -gt "0" ];then
		x=$(grep '^5-' $ppath/READ_COUNTS.txt.tmp|$spath/sumField.pl -F 2)
		y=$(grep '^5-' $ppath/READ_COUNTS.txt.tmp|$spath/sumField.pl -F 3)
		echo -e "3-altmatch\t$x\t$y\tNA" >> $ppath/READ_COUNTS.txt
	fi

	# adjust counts
	[ -r $ppath/READ_COUNTS.txt.tmp ] && cat $ppath/READ_COUNTS.txt.tmp >> $ppath/READ_COUNTS.txt && rm $ppath/READ_COUNTS.txt.tmp
	$RSCRIPT $spath/percentages.R $RUN $ppath/READ_COUNTS.txt $ppath/READ_PERCENTAGES.pdf $PAIRED > /dev/null 2>&1

	# save figures
	[ ! -d $ppath/figures ] && mkdir $ppath/figures
	[ -n "$(shopt -s nullglob;echo $ppath/*.pdf)" ] && mv $ppath/*.pdf $ppath/figures

	# save tables
	[ ! -d $ppath/tables ] && mkdir $ppath/tables
	[ -n "$(shopt -s nullglob;echo $ppath/*.txt)" ] && mv $ppath/*.txt $ppath/tables

	mkdir $ppath/intermediate
	mv $refp $ppath/intermediate/0-ITERATIVE-REFERENCES
	mv $matchp $ppath/intermediate/1-MATCH_$MATCH_PROG
	mv $sortp $ppath/intermediate/2-SORT_$SORT_PROG
	mv $alignp $ppath/intermediate/3-ALIGN_$ALIGN_PROG
	mv $assemp $ppath/intermediate/4-ASSEMBLE_$ASSEM_PROG
}

function setPrograms() {
	local i=$(($R-1))
	if [ -z "${MATCH_PROGS[$i]}" ];then
		MATCH_PROG=${MATCH_PROGS[${#MATCH_PROGS[@]}-1]}
	elif [[ "${MATCH_PROGS[$i]}" =~ ^(BLAT)$ ]];then
		MATCH_PROG=${MATCH_PROGS[$i]}
	else
		MATCH_PROG="BLAT"
		MATCH_PROGS[$i]="BLAT"
		time_stamp "match program '${MATCH_PROGS[$i]}' requested but not found. Using $MATCH_PROG"
	fi

	if [ -z "${SORT_PROGS[$i]}" ];then
		SORT_PROG=${SORT_PROGS[${#SORT_PROGS[@]}-1]}
	elif [[ "${SORT_PROGS[$i]}" =~ ^(BLAT|LABEL)$ ]];then
		SORT_PROG=${SORT_PROGS[$i]}
	else
		SORT_PROG="BLAT"
		SORT_PROGS[$i]="BLAT"
		time_stamp "sort program '${SORT_PROGS[$i]}' requested but not found. Using $SORT_PROG"
	fi

	if [ -z "${ALIGN_PROGS[$i]}" ];then
		ALIGN_PROG=${ALIGN_PROGS[${#ALIGN_PROGS[@]}-1]}
	elif [[ "${ALIGN_PROGS[$i]}" =~ ^(BLAT|SAM|NONE)$ ]];then
		ALIGN_PROG=${ALIGN_PROGS[$i]}
	else
		ALIGN_PROG="SAM"
		ALIGN_PROGS[$i]="SAM"
		time_stamp "align program '${ALIGN_PROGS[$i]}' requested but not found. Trying $ALIGN_PROG"
	fi

	# check for profiles
	if [ "$phmms" == "none" -a "$ALIGN_PROG" == "SAM" ];then
		time_stamp "align program is SAM but cannot find pHMM directory. Using BLAT"
		ALIGN_PROG="BLAT"
		ALIGN_PROGS[$i]="BLAT"
	fi
}


### START ####
time_stamp "started run '$RUN'"
if [ "$PAIRED" -eq "1" ];then
	$spath/xflate.pl -C -Q -L INTER $ppath/R0.xfl \
		<($CAT < $LEFT|parallel --pipe -L4 -j$DOUBLE_LOCAL_PROC $spath/fastQ_converter.pl $FASTQ_CONV_OPTS -G $ppath/LEFT.log -g {#}) \
		<($CAT < $RIGHT|parallel --pipe -L4 -j$DOUBLE_LOCAL_PROC $spath/fastQ_converter.pl $FASTQ_CONV_OPTS -G $ppath/RIGHT.log -g {#}) \
		> $ppath/R0.fa
	cat $ppath/{LEFT,RIGHT}.log > $ppath/QC_log.txt && rm $ppath/{LEFT,RIGHT}.log
	time_stamp 'pre-processed'
else
	$spath/xflate.pl -C -Q -L INTER $ppath/R0.xfl \
		<($CAT < $LEFT|parallel --pipe -L4 -j$SINGLE_LOCAL_PROC $spath/fastQ_converter.pl $FASTQ_CONV_OPTS -G $ppath/QC_log.txt -g {#}) \
		> $ppath/R0.fa
	time_stamp 'pre-processed'
fi

[ "$NO_MERGE" -eq "1" ] && PAIRED=0

if [ ! -s $ppath/R0.fa ];then
	time_stamp "found no QC'd data, review QC_log.txt"
	moveProject
	time_stamp 'finished!'
	exit
fi

setPrograms	# set the programs
if [ "$NO_SORT_REFS" -eq "1" ];then
	$spath/partitionByField.pl -H -X .ref $REF_SET $refp/R0-
	cat $refp/R0-*.ref > $refp/R0.refs
        time_stamp 'using supplied reference set as-is'
elif [ "$ASSEM_REF" -eq "1" ];then
	mkdir $sortp/R0
	# Sort out the references
	if [ "$SORT_PROG" == "LABEL" ];then
		doLABEL $REF_SET $MODULE $MODULE $sortp/R0 $LIMIT_LABEL
		cat $sortp/R0/SORTED_*.tab > $sortp/R0/SORT_result.txt 2> /dev/null
	elif [ "$SORT_PROG" == "BLAT" ];then
		if [ -r "$DEF_SET" ];then
			doBLAT $DEF_SET $REF_SET R0 $MODULE $sortp/R0 $SORT_PROC $LIMIT_BLAT
			cat $sortp/R0/R0-${MODULE}_????.class > $sortp/R0/SORT_result.txt
			rm $sortp/R0/R0-${MODULE}_????.class
		fi
	fi

	options=""
	[ "$SORT_PROG" == "BLAT" ] && options+=" -G"
	[ "$BAN_GROUPS" != "" ] && options+=" -B $BAN_GROUPS"
	$spath/parseSORTresults.pl $sortp/R0/SORT_result.txt $REF_SET $refp/R0 $options
	cd $sortp/R0; tar  -cf - SORT_result.txt |$ZIP -4 - > $sortp/R0.tar.gz
	cd - > /dev/null; rm -rf $sortp/R0

	if test -n "$(shopt -s nullglob;echo $refp/R0-*.fa)";then
		for fasta in $refp/R0-*.fa;do
			name=$(basename $fasta .fa)
			gene=${name#*-}
			$spath/ordinalHeaders.pl -N $gene $fasta > $refp/${name}.ref
		done
		cat $refp/R0-*.ref > $refp/R0.refs; rm $refp/R0-*.fa; REF_SET=$refp/R0.refs
		time_stamp 'sorted user supplied reference set'
	else
		time_stamp "run aborted, sequences in $REF_SET not ${MODULE}-like"
		moveProject; time_stamp 'finished!'; exit
	fi
fi

QUERY_SET=$ppath/R0.fa
while [ $R -le $MAX_ROUNDS ];do
	setPrograms
	doRound $QUERY_SET R$R
	MIN_RC=1
	MIN_RP=1

	if [ -s $QUERY_SET ];then
		((R++))
	else
		break
	fi
done
doPostProcessing

moveProject
time_stamp '\e[32m\e[1mfinished!\e[0m'
exit 0
### END ###
